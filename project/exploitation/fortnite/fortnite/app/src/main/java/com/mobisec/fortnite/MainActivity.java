package com.mobisec.fortnite;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import dalvik.system.DexClassLoader;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity {
    private final String TAG="MOBISEC";
    /* access modifiers changed from: private */
    public static String codeFilePath = null;
    /* access modifiers changed from: private */
    public static String flag = "dummyflag";
    /* access modifiers changed from: private */
    public static String hashFilePath = null;

    private void setFlag(Intent intent) {
        String flag2;
        if (intent != null && (flag2 = intent.getStringExtra("flag")) != null) {
            flag = flag2;
            Log.e("MOBISEC", "flag set correctly");
        }
    }

    /* access modifiers changed from: protected */
    @Override // android.support.v7.app.AppCompatActivity, android.support.v4.app.SupportActivity, android.support.v4.app.FragmentActivity
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_main);
        setFlag(getIntent());
        if (ContextCompat.checkSelfPermission(MainActivity.this,
                Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(MainActivity.this,
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                    1);
        }
//        final TextView flagWidget = (TextView) findViewById(R.id.flag);
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            /* class com.mobisec.fortnite.MainActivity.AnonymousClass1 */

            public void run() {
                Log.e("MOBISEC", "starting downloading fortnite game and signature");
                String unused = MainActivity.codeFilePath = MainActivity.this.downloadFile("http://10.0.2.2:31337/fortnite", "fortnite.dex");
                String unused2 = MainActivity.hashFilePath = MainActivity.this.downloadFile("http://10.0.2.2:31337/sign", "sign.dat");
            }
        }, 1000);
        timer.scheduleAtFixedRate(new TimerTask() {
            /* class com.mobisec.fortnite.MainActivity.AnonymousClass2 */

            public void run() {
                MainActivity.this.verifyAndRunCode(MainActivity.codeFilePath, MainActivity.hashFilePath);
            }
        }, 2000, 5000);
//        ((Button) findViewById(R.id.getflag)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.fortnite.MainActivity.AnonymousClass3 */
//
//            public void onClick(View v) {
//                flagWidget.setText("Getting flag....");
//                flagWidget.setTextColor(ViewCompat.MEASURED_STATE_MASK);
//                try {
//                    flagWidget.setText(MainActivity.flag);
//                } catch (Exception e) {
//                    Log.e("MOBISEC", "Exception while getting the flag:" + Log.getStackTraceString(e));
//                    flagWidget.setText("An error occurred when getting flag");
//                }
//            }
//        });
    }

    public String downloadFile(String url, String fileName) {
        try {
//            HttpURLConnection urlConnection = (HttpURLConnection) new URL(url).openConnection();
//            urlConnection.connect();
            File file = new File(Environment.getExternalStorageDirectory(), fileName);
//            if (file.exists()) {
//                file.delete();
//            }
//            FileOutputStream fileOutput = new FileOutputStream(file);
//            InputStream inputStream = urlConnection.getInputStream();
//            byte[] buffer = new byte[64];
//            while (true) {
//                int bufferLength = inputStream.read(buffer);
//                if (bufferLength > 0) {
//                    fileOutput.write(buffer, 0, bufferLength);
//                } else {
//                    fileOutput.close();
//                    Log.e("MOBISEC", "File downloaded from " + url + " to " + file.getAbsolutePath());
            return file.getAbsolutePath();
//                }
//            }
        } catch (Exception e) {
            Log.e("MOBISEC", "Exception while downloading:" + Log.getStackTraceString(e));
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public byte[] readFile(String inputFileName) {
        File file = new File(inputFileName);
        byte[] result = new byte[((int) file.length())];
        InputStream input = null;
        int totalBytesRead = 0;
        try {
            InputStream input2 = new BufferedInputStream(new FileInputStream(file));
            while (totalBytesRead < result.length) {
                int bytesRead = input2.read(result, totalBytesRead, result.length - totalBytesRead);
                if (bytesRead > 0) {
                    totalBytesRead += bytesRead;
                }
            }
            input2.close();
        } catch (Exception e) {
            Log.e("MOBISEC", "Exception while reading files:" + Log.getStackTraceString(e));
        } catch (Throwable th) {
            try {input.close();} catch (Exception e){};
            throw th;
        }
        return result;
    }

    public static byte[] getHash(byte[] payload) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        }
        digest.reset();
        return digest.digest(payload);
    }

    static String bin2hex(byte[] data) {
        return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1, data));
    }

    public void verifyAndRunCode(String codePath, String hashPath) {
        if (codePath == null || hashPath == null) {
            Log.e("MOBISEC", "error: codepath or hashpath is null");
            return;
        }
        File tmpDir = new File(getFilesDir().getAbsolutePath());
        File codeFile = new File(codePath);
        new File(hashPath);
        try {
            if (!new String(readFile(hashPath)).equals(bin2hex(getHash(readFile(codePath))))) {
                Log.e("MOBISEC", "verification error: the hash doesn't match the expected value. Aborting loading procedure.");
                return;
            }
            Class<?> classToLoad = new DexClassLoader(codeFile.getAbsolutePath(), tmpDir.getAbsolutePath(), null,
                    ClassLoader.getSystemClassLoader()).loadClass("com.mobisec.fortnitepayload.Payload");
            Log.d(TAG,"Class" + classToLoad);
            classToLoad.getDeclaredMethod("run", new Class[0]).invoke(classToLoad, new Object[0]);
        } catch (Exception e) {
            Log.e("MOBISEC", "Exception while loading/running code:" + Log.getStackTraceString(e));
        }
    }
}
