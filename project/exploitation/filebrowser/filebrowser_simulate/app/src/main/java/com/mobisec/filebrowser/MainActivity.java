package com.mobisec.filebrowser;

import androidx.appcompat.app.AppCompatActivity;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.security.Key;
import java.security.MessageDigest;
import java.util.Locale;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;

public class MainActivity extends AppCompatActivity {
    private final static String TAG = "MOBISEC";
    static final /* synthetic */ boolean $assertionsDisabled = false;
    public static final String digits = "0123456789";
    public static final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static final String lower = upper.toLowerCase(Locale.ROOT);
    public static final String alphanum = (upper + lower + digits);


    /* access modifiers changed from: protected */
    @Override // android.support.v7.app.AppCompatActivity, android.support.v4.app.SupportActivity, android.support.v4.app.FragmentActivity
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE")
                != PackageManager.PERMISSION_GRANTED ||
                checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE")
                        != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE",
                            "android.permission.WRITE_EXTERNAL_STORAGE"},
                    1);
            return;
        }

        getContentResolver().delete(LogProvider.CONTENT_URI, null, null);
        generateKey();
        setFlag(getIntent());
//        final EditText filenameWidget = (EditText) findViewById(R.id.filename);
//        TextView textView = (TextView) findViewById(R.id.result);
//        final TextView flagWidget = (TextView) findViewById(R.id.flag);
//        ((Button) findViewById(R.id.ls)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.filebrowser.MainActivity.AnonymousClass1 */
//
//            public void onClick(View v) {
//                MainActivity.this.startQuery("ls", filenameWidget.getText().toString());
//            }
//        });
//        ((Button) findViewById(R.id.du)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.filebrowser.MainActivity.AnonymousClass2 */
//
//            public void onClick(View v) {
//                MainActivity.this.startQuery("du", filenameWidget.getText().toString());
//            }
//        });
//        ((Button) findViewById(R.id.cat)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.filebrowser.MainActivity.AnonymousClass3 */
//
//            public void onClick(View v) {
//                MainActivity.this.startQuery("cat", filenameWidget.getText().toString());
//            }
//        });
//        ((Button) findViewById(R.id.getflag)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.filebrowser.MainActivity.AnonymousClass4 */
//
//            public void onClick(View v) {
//                flagWidget.setText("Getting flag....");
//                flagWidget.setTextColor(ViewCompat.MEASURED_STATE_MASK);
//                try {
//                    flagWidget.setText(MainActivity.this.getFlag());
//                } catch (Exception e) {
//                    Log.e("MOBISEC", "Exception while getting the flag:" + Log.getStackTraceString(e));
//                    flagWidget.setText("An error occurred when getting flag");
//                }
//            }
//        });
//        ((Button) findViewById(R.id.about)).setOnClickListener(new View.OnClickListener() {
//            /* class com.mobisec.filebrowser.MainActivity.AnonymousClass5 */
//
//            public void onClick(View v) {
//                MainActivity mainActivity = MainActivity.this;
//                mainActivity.startActivity(new Intent(mainActivity, AboutActivity.class));
//            }
//        });
    }

    @Override // android.support.v4.app.FragmentActivity
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        String res;
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 400 && (res = data.getStringExtra("result")) != null) {
//            ((TextView) findViewById(R.id.result)).setText(res);
        }
    }

    private void generateKey() {
        String key = getRandomString(20);
        SharedPreferences.Editor editor = getSharedPreferences("keys", 0).edit();
        editor.putString("key", key);
        editor.commit();
    }

    private static String getKey(Context ctx) throws Exception {
        String key = ctx.getSharedPreferences("keys", 0).getString("key", null);
        if (key != null) {
            return key;
        }
        throw new Exception("key not found");
    }

    private static byte[] getAesKey(Context ctx) throws Exception {
        return hash(getKey(ctx).getBytes());
    }

    public void startQuery(String oper, String arg) {
        Intent i = new Intent(this, QueryActivity.class);
        i.putExtra("oper", oper);
        i.putExtra("arg", arg);
        startActivityForResult(i, 400);
    }

    public static void logQuery(Context ctx, String oper, String arg) {
        try {
            byte[] aesKey = getAesKey(ctx);
            rawLogQuery(ctx, bin2hex(encrypt(oper.getBytes(), aesKey)), bin2hex(encrypt(arg.getBytes(), aesKey)));
        } catch (Exception e) {
        }
    }

    public static Uri rawLogQuery(Context ctx, String oper, String arg) {
        ContentValues values = new ContentValues();
        values.put("oper", oper);
        values.put("arg", arg);
        return ctx.getContentResolver().insert(LogProvider.CONTENT_URI, values);
    }

    public static boolean writeToFile(String fp, String data) {
        Log.d(TAG,"Save to " + fp);
        try {
            FileOutputStream fos = new FileOutputStream(fp);
            fos.write(data.getBytes(Charset.defaultCharset()));
            fos.close();
            return true;
        } catch (Exception e) {
            Log.d(TAG,"e " + e);
            return false;
        }
    }

    private void setFlag(Intent intent) {
        String flag = null;
        if (intent != null) {
            flag = intent.getStringExtra("flag");
        }
        if (flag == null) {
            flag = "dummyflag";
        }
        logQuery(this, "genflag", flag);
        Log.e("MOBISEC", "flag set correctly");
    }

    /* access modifiers changed from: private */
    public String getFlag() throws Exception {
        byte[] aesKey = getAesKey(this);
        String encOper = bin2hex(encrypt("genflag".getBytes(), aesKey));
        Cursor c = getContentResolver().query(Uri.parse("content://com.mobisec.provider.Log/log"), null, null, null, "oper");
        if (!c.moveToFirst()) {
            return null;
        }
        do {
            c.getString(c.getColumnIndex("id"));
            String oper = c.getString(c.getColumnIndex("oper"));
            String arg = c.getString(c.getColumnIndex("arg"));
            if (oper.equals(encOper)) {
                return new String(decrypt(hex2bin(arg), aesKey));
            }
        } while (c.moveToNext());
        return null;
    }

    public static byte[] encrypt(byte[] in, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(1, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(in);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }

    public static byte[] decrypt(byte[] ct, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(2, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(ct);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }

    public static byte[] hash(byte[] in) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(in);
        return md.digest();
    }

    public static String getRandomString(int len) {
        Random generator = new Random();
        StringBuilder randomStringBuilder = new StringBuilder();
        for (int i = 0; i < len; i++) {
            String str = alphanum;
            randomStringBuilder.append(str.charAt(generator.nextInt(str.length())));
        }
        return randomStringBuilder.toString();
    }

    static String bin2hex(byte[] data) {
        return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1, data));
    }

    public static byte[] hex2bin(String hex) throws NumberFormatException {
        if (hex.length() % 2 <= 0) {
            byte[] r = new byte[(hex.length() / 2)];
            int i = hex.length();
            while (i > 0) {
                int i2 = i - 1;
                i = i2 - 1;
                r[(i / 2) - 1] = (byte) (digit(hex.charAt(i2)) | (digit(hex.charAt(i)) << 4));
            }
            return r;
        }
        throw new NumberFormatException("Hexadecimal input string must have an even length.");
    }

    private static int digit(char ch) {
        int r = Character.digit(ch, 16);
        if (r >= 0) {
            return r;
        }
        throw new NumberFormatException("Invalid hexadecimal string: " + ch);
    }
}
